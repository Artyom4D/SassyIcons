/*! SassyIcons – v0.0.1 – 2014-04-11 */
//
// SassyIcons.
//

// A bit of terminology first.
// sprite = a single image/icon
// "sprite sheet" or "sprite map" = all sprites combined together

// Config
$icons-spacing     : 30px !default;
$icons-dir         : "icons" !default;
$icons-dir-png     : "png" !default;
$icons-dir-hidpi   : "png_2x" !default;
$icons-hidpi-scale : 2 !default;
$icons-hidpi-mq    : "(min-resolution: 1.5dppx), (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (min-resolution: 144dpi)" !default;


// Push new entry to `$map`
// --------------------------------------------------------------------------------
// @param [map] $map
// @param $key
// @param $value
// --------------------------------------------------------------------------------
// @return [map]

@function _map-set($map, $key, $value) {
  @return map-merge($map, ($key: $value));
}



// Join `$list` into a string
// --------------------------------------------------------------------------------
// @param [list] $list
// @param [string] $glue
// --------------------------------------------------------------------------------
// @return [string]

@function _join($list, $glue: "") {
  $result: "";

  @if length($list) < 1 {
    @return $result;
  }

  @for $i from 1 through length($list) {
    $result: $result + nth($list, $i) + if($i != length($list), $glue, "");
  }

  @return $result;
}



// Helper: retreive a sprite map.
// --------------------------------------------------------------------------------
// @param [string] $name
// @param [string] $factor
// --------------------------------------------------------------------------------
// @return [spritemap]

@function _sprite-map-get($name, $factor: 1x) {
  @return map-get(map-get($icons-maps, $name), $factor);
}



//
// Helper: return correct sprites-map `background-position`.
// --------------------------------------------------------------------------------
// @param [spritemap] $map
// @param [string] $sprite
// @param [number] $offset-x
// @param [number] $offset-y
// @param [number] $scale
// --------------------------------------------------------------------------------
// @return [list]

@function _sprite-position($map, $sprite, $offset-x: 0, $offset-y: 0, $scale: 1) {
  $pos: sprite-position($map, $sprite, $offset-x * $scale, $offset-y * $scale);
  @return (nth($pos, 1) nth($pos, 2) / $scale);
}

//
// SassyIcons.
//

// Storage
$icons-maps: ();

//
// Create a new sprite map from folder.
//
@mixin sprite-map-create($name) {

  $sprites-1x: _join(($icons-dir, $name, $icons-dir-png, "*.png"), "/");
  $sprites-2x: _join(($icons-dir, $name, $icons-dir-hidpi, "*.png"), "/");

  $map-1x: sprite-map($sprites-1x, $spacing: $icons-spacing);
  $map-2x: sprite-map($sprites-2x, $spacing: $icons-spacing);

  $icons-maps: _map-set($icons-maps, $name, (1x: $map-1x, 2x: $map-2x)) !global;

  @at-root %sprite-map-#{$name}-image-map {
    background: {
      image: $map-1x;
      repeat: no-repeat;
    }
  }
  @at-root %sprite-map-#{$name}-2x-image-map {
    @media #{$icons-hidpi-mq} {
      background: {
        image: $map-2x;
        size: ceil(image-width(sprite-path($map-2x)) / $icons-hidpi-scale) auto;
      }
    }
  }
}

//
// SassyIcons.
//

//
// Main icon mixin.
//
@mixin icon($name, $sprite, $offset: 0 0, $type: "svg") {

  $map-1x: _sprite-map-get($name);
  $map-2x: _sprite-map-get($name, 2x);

  // Shorter mixin calls.
  $offset-x: nth($offset, 1);
  $offset-y: nth($offset, 2);

  @if ($type == "svg") {

    $svg-file: _join(($icons-dir, $name, "#{$sprite}.svg"), "/");

    background: {
      image: inline-image($svg-file);
      repeat: no-repeat;
    }

    .svg & {
      @content;
    }

    .no-svg &,
    .no-js & {

      @extend %sprite-map-#{$name}-image-map;

      background-position: _sprite-position($map-1x, $sprite, $offset-x, $offset-y);
    }

  }
  @else if ($type == "png") {

    @extend %sprite-map-#{$name}-image-map;

    background-position: _sprite-position($map-1x, $sprite, $offset-x, $offset-y);

    @extend %sprite-map-#{$name}-2x-image-map;

    @media #{$icons-hidpi-mq} {
      background-position: _sprite-position($map-2x, $sprite, $offset-x, $offset-y, $icons-hidpi-scale);
    }
  }
}

//
// SassyIcons.
//

//
// Embed a single icon as inline-image (no sprite).
// Should be used very sporadically.
//
@mixin icon-single($name, $sprite, $type: "svg") {

  // sprite-file() and inline-image() no work.
  // @see https://github.com/chriseppstein/compass/issues/951

  $svg-file: _join(($icons-dir, $name, "#{$sprite}.svg"), "/");
  $png-file-1x: _join(($icons-dir, $name, $icons-dir-png, "#{$sprite}.png"), "/");
  $png-file-2x: _join(($icons-dir, $name, $icons-dir-hidpi, "#{$sprite}.png"), "/");

  @if ($type == "svg") {

    background: {
      image: inline-image($svg-file);
      repeat: no-repeat;
    }

    .svg & {
      @content;
    }

    .no-svg &,
    .no-js & {
      background-image: inline-image($png-file-1x);
    }

  }
  @else if ($type == "png") {

    background: {
      image: inline-image($png-file-1x);
      repeat: no-repeat;
    }

    @media #{$icons-hidpi-mq} {
      background-image: inline-image($png-file-2x);
    }
  }
}


//
// Generated content.
//
@mixin generated($width: false, $height: false, $top: false, $right: false, $bottom: false, $left: false) {
  //
  //  Boilerplate styles for generated content .before :after
  //
  @if ($width) { width: $width };
  @if ($height) { height: $height };
  content: "";
  display: block;
  position: absolute;
  @if($top) { top: $top; }
  @if($right) { right: $right; }
  @if($bottom) { bottom: $bottom; }
  @if($left) { left: $left; }
  z-index: 1;

  @content;
}

//
// SassyIcons.
//

//
// Include the icon in a generated "pseudo-element".
// Default to :before
// Allows for easier positioning or centering.
//
@mixin icon-generated($name, $sprite, $type: "svg", $pos: "before", $centered: false) {
  position: relative;

  &:#{$pos} {
    $sprite-file: sprite-file(_sprite-map-get($name), $sprite);

    $width: image-width($sprite-file);
    $height: image-height($sprite-file);


    @include generated($width, $height);

    @if ($centered) {
      top: 35%;
      top: calc(50% - #{$height} / 2);
      left: 35%;
      left: calc(50% - #{$width} / 2);
    }

    @include icon($name: $name, $sprite: $sprite, $type: $type);

    @content;
  }
}
